@article{Pearls,
  title={Programming pearls: Writing correct programs},
  author={Bentley, Jon},
  journal={Communications of the ACM},
  volume={26},
  number={12},
  pages={1040--1045},
  year={1983},
  publisher={ACM New York, NY, USA}
}



@book{lakatos1963proofs,
  title={Proofs and refutations},
  author={Lakatos, Imre},
  year={1963},
  publisher={Nelson London}
}

@book{mackenzie2004mechanizing,
  title={Mechanizing proof: computing, risk, and trust},
  author={MacKenzie, Donald},
  year={2004},
  publisher={MIT Press}
}

@misc{bloch,
  author = {Joshua Bloch},
  title = {Extra, Extra - Read All About It: Nearly All Binary Searches and Mergesorts are Broken},
  year = 2006,
  howpublished = "\url{https://blog.research.google/2006/06/extra-extra-read-all-about-it-nearly.html}"
  }
  

@misc{buterin2013whitepaper,
  author = {Vitalik Buterin},
  title = {Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform},
  howpublished = "\url{https://github.com/ethereum/wiki/wiki/White-Paper}",
  year = {2013}
}


@inproceedings{echidnaissta,
author = {Grieco, Gustavo and Song, Will and Cygan, Artur and Feist, Josselin and Groce, Alex},
title = {Echidna: Effective, Usable, and Fast Fuzzing for Smart Contracts},
year = {2020},
address = {New York, NY, USA},
booktitle = {ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {557â€“560}
}



@inproceedings{verismart,
    title={{VeriSmart}: A Highly Precise Safety Verifier for Ethereum Smart Contracts},
    author={Sunbeom So and Myungho Lee and Jisu Park and Heejo Lee and Hakjoo Oh},
    year={2020},
   booktitle={{IEEE} Symposium on Security \& Privacy},
   notes = {accepted for publication}
}

@misc{measurepop,
  howpublished="\url{https://github.com/smartanvil/smartanvil.github.io/blob/master/_posts/2018-03-14-on-contract-popularity-analysis.md}",
  title="On Contract Popularity Analysis",
  author="Santiago Bragagnolo"
}

@techreport{smartanvil,
  title={SmartAnvil: Open-Source Tool Suite for Smart Contract Analysis},
  author={Ducasse, St{\'e}phane and Rocha, Henrique and Bragagnolo, Santiago and Denker, Marcus and Francomme, Cl{\'e}ment},
  year={2019},
  institution="{HAL}",
  number="hal-01940287"
}

@mastersthesis{dika2017ethereum,
  title={Ethereum Smart Contracts: Security Vulnerabilities and Security Tools},
  author={Dika, Ardit},
  year={2017},
  school={NTNU}
}

@inproceedings{chen2018under,
 author = {Chen, Ting and Li, Zihao and Zhou, Hao and Chen, Jiachi and Luo, Xiapu and Li, Xiaoqi and Zhang, Xiaosong},
 title = {Towards Saving Money in Using Smart Contracts},
 booktitle = {Proceedings of the 40th International Conference on Software Engineering: New Ideas and Emerging Results},
 series = {ICSE-NIER '18},
 year = {2018},
 isbn = {978-1-4503-5662-6},
 location = {Gothenburg, Sweden},
 pages = {81--84},
 numpages = {4},
 url = {http://doi.acm.org/10.1145/3183399.3183420},
 doi = {10.1145/3183399.3183420},
 acmid = {3183420},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {anti-patterns, detection, optimization, smart contract},
} 

@inproceedings{chen2017under,
  title={Under-optimized smart contracts devour your money},
  author={Chen, Ting and Li, Xiaoqi and Luo, Xiapu and Zhang, Xiaosong},
  booktitle={Software Analysis, Evolution and Reengineering (SANER), 2017 IEEE 24th International Conference on},
  pages={442--446},
  year={2017},
  organization={IEEE}
}

@misc{wood2014yellow,
  author = {Gavin Wood},
  title = {Ethereum:  a  secure  decentralised  generalised  transaction  ledger},
  howpublished = "\url{http://gavwood.com/paper.pdf}",
  year = {2014}
}

@misc{nakamoto2008bitcoin,
  title={Bitcoin: A peer-to-peer electronic cash system},
  author={Satoshi Nakamoto},
  howpublished = "\url{https://bitcoin.org/bitcoin.pdf}",
  year={2008}
}

@inproceedings{slitherpaper,
  author = "Josselin Feist and Gustavo Greico and Alex Groce",
  title = "Slither: A Static Analysis Framework For Smart Contracts",
  year = 2019,
  booktitle = "International Workshop on Emerging Trends in Software Engineering for Blockchain",
  }

@misc{parity,
  title={Parity Ethereum client},
  author={Parity},
  howpublished = "\url{https://parity.io}",
  year={2016}
}

@misc{special,
  title={Journal Special Issue on Fuzzing:
What about Preregistration?},
  author={Marcel B\"{o}hme and L\'{a}szl\'{o} Szekeres and Baishakhi Ray and Cristian Cadar},
  howpublished={\url{http://fuzzbench.com/blog/2021/04/22/special-issue/}},
  year={2021},
  month={April}}

@article{HolmesLOC,
author = {Holmes, Josie and Ahmed, Iftekhar and Brindescu, Caius and Gopinath, Rahul and Zhang, He and Groce, Alex},
title = {Using Relative Lines of Code to Guide Automated Test Generation for Python},
year = {2020},
issue_date = {October 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {4},
issn = {1049-331X},
url = {https://doi.org/10.1145/3408896},
doi = {10.1145/3408896},
abstract = {Raw lines of code (LOC) is a metric that does not, at first glance, seem extremely useful for automated test generation. It is both highly language-dependent and not extremely meaningful, semantically, within a language: one coder can produce the same effect with many fewer lines than another. However, relative LOC, between components of the same project, turns out to be a highly useful metric for automated testing. In this article, we make use of a heuristic based on LOC counts for tested functions to dramatically improve the effectiveness of automated test generation. This approach is particularly valuable in languages where collecting code coverage data to guide testing has a very high overhead. We apply the heuristic to property-based Python testing using the TSTL (Template Scripting Testing Language) tool. In our experiments, the simple LOC heuristic can improve branch and statement coverage by large margins (often more than 20%, up to 40% or more) and improve fault detection by an even larger margin (usually more than 75% and up to 400% or more). The LOC heuristic is also easy to combine with other approaches and is comparable to, and possibly more effective than, two well-established approaches for guiding random testing.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = sep,
articleno = {28},
numpages = {38},
keywords = {Automated test generation, static code metrics, testing heuristics}
}

@misc{slither-code,
  title={Slither: a static analyzer for Solidity},
  author={{Anonymized for review}},
  howpublished = "{Anonymized for review}",
  year={2018}
}


%  title={Slither: a static analyzer for Solidity},
%  author={{Trail of Bits}},
%  howpublished = "\url{https://github.com/trailofbits/slither}",
%  year={2018}
%}



@misc{slither-api,
  title={{Slither Python API}},
  author={{Trail of Bits}},
  howpublished = "\url{https://github.com/trailofbits/slither/wiki/API-examples}",
  year={2018}
}


@misc{slither-slithir,
  title={SlithIR Documentation},
  author={{Trail of Bits}},
  howpublished = "\url{https://github.com/trailofbits/slither/wiki/SlithIR}",
  year={2018}
}




@misc{spank,
  title={We Got Spanked: What We Know So Far},
  author={{SpankChain}},
  howpublished = "\url{https://medium.com/spankchain/we-got-spanked-what-we-know-so-far-d5ed3a0f38fe}",
  year={Oct 8, 2018 (acceded on Jan 10, 2019)}
}

@inproceedings{SurveyAttacks,
 author = {Atzei, Nicola and Bartoletti, Massimo and Cimoli, Tiziana},
 title = {A Survey of Attacks on {Ethereum} Smart Contracts {SoK}},
 booktitle = {International Conference on Principles of Security and Trust},
 year = {2017},
 pages = {164--186},
 url = {https://doi.org/10.1007/978-3-662-54455-6_8},
 doi = {10.1007/978-3-662-54455-6_8}
} 

@misc{reports,
  title={Trail of Bits Security Reviews},
  author = {{Trail of Bits}},
  howpublished="\url{https://github.com/trailofbits/publications\#security-reviews}",
  year=2019
  }

@misc{DAO,
  title={Analysis of the DAO exploit},
  author={{Phil Daian }},
  howpublished = "\url{http://hackingdistributed.com/2016/06/18/analysis-of-the-dao-exploit/}",
  year={June 18, 2016 (acceded on Jan 10, 2019)}
}

@misc{echidna-code,
  title={Echidna: Ethereum fuzz testing framework},
  author={{Trail of Bits}},
  howpublished = "\url{https://github.com/trailofbits/echidna}",
  year={2018}
}

@misc{mythril-code,
  title={Mythril: a security analysis tool for Ethereum smart contracts},
  author={ConsenSys},
  howpublished = "\url{https://github.com/ConsenSys/mythril-classic}",
  year={2017}
}

@misc{manticore-code,
  title={Manticore: Symbolic Execution for Humans},
  author={{Trail of Bits}},
  howpublished="\url{https://github.com/trailofbits/manticore}",
  year={2017}
}

@misc{mythx,
  howpublished="\url{https://mythx.io/}",
  author="Consensys Diligence",
  }

@misc{solhint-code,
  title={Solhint: an open source project for linting solidity code},
  author={Protofire},
  howpublished = "\url{https://protofire.github.io/solhint/}",
  year={2017}
}

@misc{oyente-code,
  title={Oyente: an analysis tool for smart contracts},
  author={Melon Project},
  howpublished = "\url{https://github.com/melonproject/oyente}",
  year={2017}
}


@misc{etherscan,
  title={Verified contracts synced from Etherscan},
  author={Gerhard Wagner},
  howpublished = "\url{https://github.com/thec00n/etherscan_verified_contracts}",
  year={2018}
}

@misc{aflfuzz,
  title = "american fuzzy lop (2.35b)",
  author = "Michal Zalewski",
  howpublished = "\url{http://lcamtuf.coredump.cx/afl/}",
  note = "Accessed December 20, 2016"
}

@inproceedings{ClaessenH00,
author    = {Koen Claessen and
           John Hughes},
title     = {{QuickCheck}: a lightweight tool for random testing of {Haskell}
           programs},
booktitle = {International Conference on Functional Programming {(ICFP)}},
year      = {2000},
pages     = {268--279},
ee        = {http://doi.acm.org/10.1145/351240.351266},
bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{regexpMut,
 author = {Groce, Alex and Holmes, Josie and Marinov, Darko and Shi, August and Zhang, Lingming},
 title = {An Extensible, Regular-expression-based Tool for Multi-language Mutant Generation},
 booktitle = {Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings},
 series = {ICSE '18},
 year = {2018},
 isbn = {978-1-4503-5663-3},
 location = {Gothenburg, Sweden},
 pages = {25--28},
 numpages = {4},
 url = {http://doi.acm.org/10.1145/3183440.3183485},
 doi = {10.1145/3183440.3183485},
 acmid = {3183485},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {multi-language tools, mutation testing, regular expressions},
} 


@incollection{MutationSurvey,
  title={Mutation testing advances: an analysis and survey},
  author={Papadakis, Mike and Kintis, Marinos and Zhang, Jie and Jia, Yue and Le Traon, Yves and Harman, Mark},
  booktitle={Advances in Computers},
  volume={112},
  pages={275--378},
  year={2019},
  publisher={Elsevier}
}


@misc{dataset-small,
  title={Directory of ERC20 tokens},
  author={Trust Wallet},
  howpublished = "\url{https://github.com/TrustWallet/tokens}",
  year={2018}
}

@inproceedings{contractfuzzer,
  title={Contractfuzzer: Fuzzing smart contracts for vulnerability detection},
  author={Jiang, Bo and Liu, Ye and Chan, WK},
  booktitle={Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
  pages={259--269},
  year={2018}
}

@misc{solfuzz,
  howpublished="\url{https://github.com/b-mueller/solfuzz}",
  author = "Bernhard Mueller"
  }

@inproceedings{Pacheco,
  author = "Carlos Pacheco and Shuvendu K. Lahiri and Michael D. Ernst and Thomas Ball",
  title = "Feedback-directed Random Test Generation",
  booktitle = "International Conference on Software Engineering",
  year = "2007",
  pages = "75--84"
}

@misc{albert2019gasol,
    title={GASOL: Gas Analysis and Optimization for Ethereum Smart Contracts},
    author={Elvira Albert and JesÃºs Correas and Pablo Gordillo and Guillermo RomÃ¡n-DÃ­ez and Albert Rubio},
    year={2019},
    eprint={1912.11929},
    archivePrefix={arXiv},
    primaryClass={cs.PL}
}

@article{dijkstra1977position,
  title={A position paper on software reliability},
  author={Dijkstra, Edsger W},
  journal={ACM SIGSOFT Software Engineering Notes},
  volume={2},
  number={5},
  pages={3--5},
  year={1977},
  publisher={ACM New York, NY, USA}
}


@book{ewd,
editor = {Dahl, O. J. and Dijkstra, E. W. and Hoare, C. A. R.},
title = {Structured Programming},
year = {1972},
isbn = {0122005503},
publisher = {Academic Press Ltd.},
address = {GBR},
abstract = {In recent years there has been an increasing interest in the art of computer programming,
the conceptual tools available for the design of programs, and the prevention of programming
oversights and error. The initial outstanding contribution to our understanding of
this subject was made by E. W. Dijkstra, whose Notes on Structured Programming form
the first and major section of this book. They clearly expound the reflections of
a brilliant programmer on the methods which he has hitherto unconsciously applied;
there can be no programmer of the present day who could not increase his skills by
a study and conscious application of these principles.In the second monograph I have
tried to describe how similar principles can be applied in the design of data structures.
I have suggested that in analysing a problem and groping towards a solution, a programmer
should take advantage of abstract concepts such as sets, sequences, and mappings;
and judiciously postpone decisions on representation until he is constructing the
more detailed code of the program. The monograph also describes a range of useful
ideas for data representation, and suggests the criteria relevant for their selection.The
third monograph provides a synthesis of the previous two, and expounds the close theoretical
and practical connections between the design of data and the design of programs. It
introduces useful additional methods for program and data structuring which may be
unfamiliar to many programmers. The examples show that structured programming principles
can be equally applied in "bottom-up" as in "top-down" program design. The original
inspiration, insight, and all the examples were contributed by O.-J. Dahl; I have
only assembled the material, and added some additional explanations where I found
it difficult to understand.}
}



@inproceedings{10.1145/1294211.1294256,
author = {Olsen, Dan R.},
title = {Evaluating User Interface Systems Research},
year = {2007},
isbn = {9781595936790},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1294211.1294256},
doi = {10.1145/1294211.1294256},
abstract = {The development of user interface systems has languished with the stability of desktop
computing. Future systems, however, that are off-the-desktop, nomadic or physical
in nature will involve new devices and new software systems for creating interactive
applications. Simple usability testing is not adequate for evaluating complex systems.
The problems with evaluating systems work are explored and a set of criteria for evaluating
new UI systems work is presented.},
booktitle = {Proceedings of the 20th Annual ACM Symposium on User Interface Software and Technology},
pages = {251â€“258},
numpages = {8},
keywords = {user interface systems evaluation},
location = {Newport, Rhode Island, USA},
series = {UIST '07}
}



@misc{ma2019gasfuzz,
    title={GasFuzz: Generating High Gas Consumption Inputs to Avoid Out-of-Gas Vulnerability},
    author={Fuchen Ma and Ying Fu and Meng Ren and Wanting Sun and Zhe Liu and Yu Jiang and Jun Sun and Jiaguang Sun},
    year={2019},
    eprint={1910.02945},
    archivePrefix={arXiv},
    primaryClass={cs.CR}
}

@inproceedings{lemieux2018perffuzz,
  title={Perffuzz: Automatically generating pathological inputs},
  author={Lemieux, Caroline and Padhye, Rohan and Sen, Koushik and Song, Dawn},
  booktitle={Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis},
  pages={254--265},
  year={2018}
}

@article{swarmIEEE,
  author = "Gerard Holzmann and Rajeev Joshi and Alex Groce",
  title = "Swarm Verification Techniques",
  journal = "IEEE Transactions on Software Engineering",
volume = {37},
number = {6},
  year = 2011,
  pages = "845--857"
}

@article{Differential,
  author = "William McKeeman",
  title = "Differential testing for software",
  journal = "Digital Technical Journal of Digital Equipment Corporation",
  volume = "10(1)",
  pages = "100--107",
  year = 1998
}


@inproceedings{groce2015verified,
  title={How verified is my code? falsification-driven verification (t)},
  author={Groce, Alex and Ahmed, Iftekhar and Jensen, Carlos and McKenney, Paul E},
  booktitle={2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  pages={737--748},
  year={2015},
  organization={IEEE}
}

@article{groce2018verified,
  title={How verified (or tested) is my code? Falsification-driven verification and testing},
  author={Groce, Alex and Ahmed, Iftekhar and Jensen, Carlos and McKenney, Paul E and Holmes, Josie},
  journal={Automated Software Engineering},
  volume={25},
  number={4},
  pages={917--960},
  year={2018},
  publisher={Springer}
}

@inproceedings{groce2013help,
  title={Help, help, {I'm} being suppressed! The significance of suppressors in software testing},
  author={Groce, Alex and Zhang, Chaoqiang and Alipour, Mohammad Amin and Eide, Eric and Chen, Yang and Regehr, John},
  booktitle={2013 IEEE 24th International Symposium on Software Reliability Engineering (ISSRE)},
  pages={390--399},
  year={2013},
  organization={IEEE}
}

@inproceedings{ICSEDiff,
  author = "Alex Groce and Gerard Holzmann and Rajeev Joshi",
  title = "Randomized Differential Testing as a Prelude to Formal Verification",
  booktitle = "International Conference on Software Engineering",
  year = 2007,
  pages = "621--631"
}


@inproceedings{ASE08,
  author = "James H. Andrews and Alex Groce and Melissa Weston and Ru-Gang Xu",
  title = "Random Test Run Length and Effectiveness",
  booktitle = "Automated Software Engineering",
pages = "19--28",
  year = 2008
}

@inproceedings{ISSTA12,
  author = "Alex Groce and Chaoqiang Zhang and Eric Eide and Yang Chen and John Regehr",
  title = "Swarm Testing",
  booktitle = "International Symposium on Software Testing and Analysis",
  year = 2012,
  pages = "78--88"
}


@book{SPIN,
  author="Gerard J. Holzmann",
  title="The {SPIN} Model Checker: Primer and Reference Manual",
  publisher="Addison-Wesley Professional",
  year="2003"}

@misc{chainfuzz,
  howpublished="\url{https://github.com/ChainSecurity/ChainFuzz}",
  author="{Chain Security}"
  }

@inproceedings{oyente,
 author = {Luu, Loi and Chu, Duc-Hiep and Olickel, Hrishi and Saxena, Prateek and Hobor, Aquinas},
 title = {Making Smart Contracts Smarter},
 series = {CCS '16},
 year = {2016},
} 

@inproceedings{goodman2018deepstate,
  title={{DeepState}: Symbolic unit testing for {C} and {C++}},
  author={Goodman, Peter and Groce, Alex},
  booktitle={NDSS Workshop on Binary Analysis Research},
  year={2018}
}

@inproceedings{jiang:ase:2018,
  author = {Jiang, Bo and Liu, Ye and Chan, W. K.},
  title = {{ContractFuzzer}: Fuzzing Smart Contracts for Vulnerability Detection},
  year = {2018},
  booktitle={International Conference on Automated Software Engineering},
  pages = {259--269}
}

@inproceedings{harvey,
  title = {Harvey: A Greybox Fuzzer for Smart Contracts},
  author = {W{\"u}stholz, Valentin and Christakis, Maria},
  booktitle = {Foundations of
    Software Engineering},
  pages = {1398--1409},
  year = 2020
}

@inproceedings{sfuzz,
author = {Nguyen, Tai D. and Pham, Long H. and Sun, Jun and Lin, Yun and Minh, Quang Tran},
title = {{SFuzz}: An Efficient Adaptive Fuzzer for {Solidity} Smart Contracts},
year = {2020},

booktitle = {International Conference on Software Engineering},
pages = {778â€“788}
}

@inproceedings{he2019learning,
  title={Learning to fuzz from symbolic execution with application to smart contracts},
  author={He, Jingxuan and Balunovi{\'c}, Mislav and Ambroladze, Nodar and Tsankov, Petar and Vechev, Martin},
  booktitle={ Conference on Computer and Communications Security},
  pages={531--548},
  year={2019}
}

@article{dietterich2002ensemble,
  title={Ensemble learning},
  author={Dietterich, Thomas G and others},
  journal={The handbook of brain theory and neural networks},
  volume={2},
  pages={110--125},
  year={2002},
  publisher={MIT press Cambridge, Massachusetts}
}

@inproceedings{zhou2021foundationdb,
  title={{FoundationDB:} A Distributed Unbundled Transactional Key Value Store},
  author={Zhou, Jingyu and Xu, Meng and Shraer, Alexander and Namasivayam, Bala and Miller, Alex and Tschannen, Evan and Atherton, Steve and Beamon, Andrew J and Sears, Rusty and Leach, John and others},
  year={2021},
  booktitle={{ACM} {SIGMOD}}
}

@article{le2014compiler,
  title={Compiler validation via equivalence modulo inputs},
  author={Le, Vu and Afshari, Mehrdad and Su, Zhendong},
  journal={ACM SIGPLAN Notices},
  volume={49},
  number={6},
  pages={216--226},
  year={2014},
  publisher={ACM New York, NY, USA}
}


@inproceedings{chen2019enfuzz,
  title={Enfuzz: Ensemble fuzzing with seed synchronization among diverse fuzzers},
  author={Chen, Yuanliang and Jiang, Yu and Ma, Fuchen and Liang, Jie and Wang, Mingzhe and Zhou, Chijin and Jiao, Xun and Su, Zhuo},
  booktitle={{USENIX} Security Symposium},
  pages={1967--1983},
  year={2019}
}

@inproceedings{dewey2015fuzzing,
  title={Fuzzing the Rust typechecker using CLP (T)},
  author={Dewey, Kyle and Roesch, Jared and Hardekopf, Ben},
  booktitle={2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  pages={482--493},
  year={2015},
  organization={IEEE}
}



@misc{solidityj-code,
  title={Solidity grammar for ANTLR4 },
  author={Federico Bond},
  howpublished = "\url{https://github.com/solidityj/solidity-antlr4}",
  year={2017}
}

@inproceedings{10.1145/2491956.2462173,
author = {Chen, Yang and Groce, Alex and Zhang, Chaoqiang and Wong, Weng-Keen and Fern, Xiaoli and Eide, Eric and Regehr, John},
title = {Taming Compiler Fuzzers},
year = {2013},
isbn = {9781450320146},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491956.2462173},
doi = {10.1145/2491956.2462173},
abstract = {Aggressive random testing tools ("fuzzers") are impressively effective at finding compiler bugs. For example, a single test-case generator has resulted in more than 1,700 bugs reported for a single JavaScript engine. However, fuzzers can be frustrating to use: they indiscriminately and repeatedly find bugs that may not be severe enough to fix right away. Currently, users filter out undesirable test cases using ad hoc methods such as disallowing problematic features in tests and grepping test results. This paper formulates and addresses the fuzzer taming problem: given a potentially large number of random test cases that trigger failures, order them such that diverse, interesting test cases are highly ranked. Our evaluation shows our ability to solve the fuzzer taming problem for 3,799 test cases triggering 46 bugs in a C compiler and 2,603 test cases triggering 28 bugs in a JavaScript engine.},
booktitle = {Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {197â€“208},
numpages = {12},
keywords = {automated testing, compiler testing, random testing, compiler defect, test-case reduction, bug reporting, fuzz testing},
location = {Seattle, Washington, USA},
series = {PLDI '13}
}


@inproceedings{Taming,
author = {Chen, Yang and Groce, Alex and Zhang, Chaoqiang and Wong, Weng-Keen and Fern, Xiaoli and Eide, Eric and Regehr, John},
title = {Taming Compiler Fuzzers},
year = {2013},
url = {https://doi.org/10.1145/2499370.2462173},
doi = {10.1145/2499370.2462173},
abstract = {Aggressive random testing tools ("fuzzers") are impressively effective at finding compiler bugs. For example, a single test-case generator has resulted in more than 1,700 bugs reported for a single JavaScript engine. However, fuzzers can be frustrating to use: they indiscriminately and repeatedly find bugs that may not be severe enough to fix right away. Currently, users filter out undesirable test cases using ad hoc methods such as disallowing problematic features in tests and grepping test results. This paper formulates and addresses the fuzzer taming problem: given a potentially large number of random test cases that trigger failures, order them such that diverse, interesting test cases are highly ranked. Our evaluation shows our ability to solve the fuzzer taming problem for 3,799 test cases triggering 46 bugs in a C compiler and 2,603 test cases triggering 28 bugs in a JavaScript engine.},
booktitle={ACM SIGPLAN Symposium on Programming Language Design and Implementation},
month = jun,
pages = {197â€“208},
numpages = {12},
keywords = {fuzz testing, compiler testing, compiler defect, test-case reduction, random testing, bug reporting, automated testing}
}

@article{coupon,
  title={Asymptotic distributions for the coupon collector's problem},
  author={Baum, Leonard E and Billingsley, Patrick},
  journal={The Annals of Mathematical Statistics},
  volume={36},
  number={6},
  pages={1835--1839},
  year={1965},
  publisher={JSTOR}
}

@misc{webassembly,
  title={WebAssembly},
  howpublished = "\url{http://webassembly.org/}",
  year={2016}
}

@inproceedings{securify,
 author = {Tsankov, Petar and Dan, Andrei and Drachsler-Cohen, Dana and Gervais, Arthur and B\"{u}nzli, Florian and Vechev, Martin},
 title = {Securify: Practical Security Analysis of Smart Contracts},
 series = {CCS '18},
 year = {2018},
}

@inproceedings{Discontents,
author = {Groce, Alex and Alipour, Mohammad Amin and Gopinath, Rahul},
title = {Coverage and Its Discontents},
year = {2014},
isbn = {9781450332101},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2661136.2661157},
doi = {10.1145/2661136.2661157},
abstract = {Everyone wants to know one thing about a test suite: will it detect enough bugs? Unfortunately, in most settings that matter, answering this question directly is impractical or impossible. Software engineers and researchers therefore tend to rely on various measures of code coverage (where mutation testing is considered a form of syntactic coverage). A long line of academic research efforts have attempted to determine whether relying on coverage as a substitute for fault detection is a reasonable solution to the problems of test suite evaluation. This essay argues that the profusion of coverage-related literature is in part a sign of an underlying uncertainty as to what exactly it is that measuring coverage should achieve, as well as how we would know if it can, in fact, achieve it. We propose some solutions and mitigations, but the primary focus of this essay is to clarify the state of current confusions regarding this key problem for effective software testing.},
booktitle = {Proceedings of the 2014 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming \& Software},
pages = {255â€“268},
numpages = {14},
keywords = {evaluation, testing, coverage},
location = {Portland, Oregon, USA},
series = {Onward\! 2014}
}

@inproceedings{ParamUnit,
 author = {Tillmann, Nikolai and Schulte, Wolfram},
 title = {Parameterized Unit Tests},
 booktitle = {Proceedings of the 10th European Software Engineering Conference Held Jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
 year = {2005},
 pages = {253--262}
} 

@misc{GoogleTest,
  title = "Google {Test}",
  howpublished="\url{https://github.com/google/googletest}",
  year = 2008
  }

@inproceedings{FormalCoupon,
author = {Arcuri, Andrea and Iqbal, Muhammad Zohaib and Briand, Lionel},
title = {Formal Analysis of the Effectiveness and Predictability of Random Testing},
year = {2010},
isbn = {9781605588230},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1831708.1831736},
doi = {10.1145/1831708.1831736},
abstract = {There has been a lot of work to shed light on whether random testing is actually a useful testing technique. Despite its simplicity, several successful real-world applications appear in the literature. Although it is not going to solve all possible testing problems, random testing is an essential tool in the hands of software testers. In this paper, we address general questions about random testing, such as how long random testing needs on average to achieve testing targets (e.g., coverage), how does it scale and how likely is it to yield similar results if we re-run random testing on the same testing problem. Due to its simplicity that makes the mathematical analysis of random testing tractable, we provide precise and rigorous answers to these questions. Our formal results can be applied to most types of software and testing criteria. Simulations are carried out to provide further support to our formal results. The obtained results are then used to assess the validity of empirical analyses reported in the literature. Results show that random testing is more effective and predictable than previously thought.},
booktitle = {Proceedings of the 19th International Symposium on Software Testing and Analysis},
pages = {219â€“230},
numpages = {12},
keywords = {random testing, predictability, coupon collector, theory, schur function},
location = {Trento, Italy},
series = {ISSTA '10}
}



@article{ArcuriLen,
  author    = {Andrea Arcuri},
  title     = {A Theoretical and Empirical Analysis of the Role of Test Sequence
               Length in Software Testing for Structural Coverage},
  journal   = {{IEEE} Trans. Software Eng.},
  volume    = {38},
  number    = {3},
  pages     = {497--519},
  year      = {2012},
  url       = {https://doi.org/10.1109/TSE.2011.44},
  doi       = {10.1109/TSE.2011.44},
  timestamp = {Wed, 17 May 2017 10:56:38 +0200},
  biburl    = {https://dblp.org/rec/journals/tse/Arcuri12.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{arcuri2014hitchhiker,
title={A hitchhiker's guide to statistical tests for assessing randomized algorithms in software engineering},
author={Arcuri, Andrea and Briand, Lionel},
journal={Software Testing, Verification and Reliability},
volume={24},
number={3},
pages={219--250},
year={2014}
}

@misc{Hypothesis,
author = "David R. MacIver",
title = "Hypothesis: Test faster, fix more",
howpublished = "\url{http://hypothesis.works/}",
year = 2013,
month = "March"
}

@misc{grishchenko2018semantic,
  author = {Ilya Grishchenko and Matteo Maffei and Clara Schneidewind},
  Title = {A Semantic Framework for the Security Analysis of Ethereum smart contracts},
  Year = {2018},
  howpublished = {arXiv:1802.08660},
  note = {Accessed:2018-03-12},
  url = {https://arxiv.org/pdf/1802.08660.pdf},
}

@inproceedings{smartcheck,
 author = {Tikhomirov S. and et al.},
 title = {SmartCheck: Static Analysis of Ethereum Smart Contracts},
 series = {WETSEB},
 year = {2018},
}

@misc{atzei2016survey,
  author = {Nicola Atzei and Massimo Bartoletti and Tiziana Cimoli},
  title = {A survey of attacks on Ethereum smart contracts},
  publisher = {Cryptology ePrint Archive, Report 2016/1007},
  year = {2016},
  month = {Oct},
  note = {Accessed: 2016-11-08},
  url = {https://eprint.iacr.org/2016/1007.pdf},
}

@inproceedings{DBLP:conf/ndss/KalraGDS18,
  author    = {Sukrit Kalra and
               Seep Goel and
               Mohan Dhawan and
               Subodh Sharma},
  title     = {{ZEUS:} Analyzing Safety of Smart Contracts},
  booktitle = {25th Annual Network and Distributed System Security Symposium, {NDSS}
               2018, San Diego, California, USA, February 18-21, 2018},
  year      = {2018},
  crossref  = {DBLP:conf/ndss/2018},
  url       = {http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018\_09-1\_Kalra\_paper.pdf},
  timestamp = {Thu, 09 Aug 2018 10:57:16 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/ndss/KalraGDS18},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@book{mao,
  title={The Hundred Flowers Campaign and the Chinese Intellectuals},
  author={MacFarquhar, Roderick},
  year={1966},
  publisher={Praeger},
  city={New York}
  }

@book{cervantes,
  title={Don Quixote},
  author={Cervantes, Miguel de},
  year={1605}
}



@book{chesterton,
  title={The Uses of Diversity: A Book of Essays},
  author={Chesterton, G. K.},
  year = 1920
  }

@book{Montaigne,
 title={Essays},
 author={Montaigne, Michel de},
 year={1595}
 }

@article{Brooks1987NoSB,
  title={No Silver Bullet Essence and Accidents of Software Engineering},
  author={Brooks, Frederic P.},
  journal={Computer},
  year={1987},
  volume={20},
  pages={10-19}
}

@article{Brent2018VandalAS,
  title={Vandal: A Scalable Security Analysis Framework for Smart Contracts},
  author={Lexi Brent and et al.},
  journal={CoRR},
  year={2018},
  volume={abs/1809.03981}
}

@inproceedings{Spirit,
author = "Glenn Reeves and Tracy Neilson",
title = "The {Mars} {Rover} {Spirit} {Flash} Anomaly",
booktitle = "IEEE Aerospace Conference",
year = "2005"
}


@inproceedings {teether,
  author = {Johannes Krupp and Christian Rossow},
  title = {teEther: Gnawing at Ethereum to Automatically Exploit Smart Contracts},
  booktitle = {USENIX Security )},
  year = {2018},
}

@article{tstlsttt,
author = "Josie Holmes and Alex Groce and Jervis Pinto and Pranjal Mittal and Pooria Azimi and Kevi
n Kellar and James O'Brien",
title = "{TSTL:} the Template Scripting Testing Language",
journal = "International Journal on Software Tools for Technology Transfer",
year = 2018,
volume=20,
number =1,
pages="57--78"
}


@inproceedings{WODACommon,
author = {Groce, Alex and Erwig, Martin},
title = {Finding Common Ground: Choose, Assert, and Assume},
booktitle = {International Workshop on Dynamic Analysis},
year = {2012},
pages = {12--17}
} 


@misc{ethertrust,
  title={EtherTrust: Sound Static Analysis of Ethereum bytecode},
  author={Ilya Grishchenko and Matteo Maffei and Clara Schneidewind},
  year={2018}
}

@inproceedings{maian,
  author = {Nikolic, Ivica and Kolluri, Aashish and Sergey, Ilya and Saxena, Prateek and Hobor, Aquinas},
  booktitle = {ACSAC},
  title = {Finding The Greedy, Prodigal, and Suicidal Contracts at Scale},
  year = {2018}
}

@inproceedings{FC20,
  title={What are the Actual Flaws in Important Smart Contracts (and How Can We Find Them)?},
  author={Alex Groce and Josselin Feist and Gustavo Grieco and Michael Colburn},
  year={2020},
  booktitle="International Conference on Financial Cryptography and Data Security"
}


@inproceedings{SSA,
  author = {Rosen, Barry K. and Wegman, Mark N. and Zadeck, F. Kenneth},
  booktitle = {POPL},
  title = {Global Value Numbers and Redundant Computations},
  year = {1988}
}


@misc{scilla,
  title={SCILLA Safe-By-Design Smart Contract Language},
  author={Zilliqa},
  howpublished = "\url{https://scilla-lang.org/}",
  year={Accessed on Jan 10, 2019}
}

@misc{michelson,
  title={Michelson: the language of Smart Contracts in Tezos},
  author={Tezos},
  howpublished = "\url{http://www.liquidity-lang.org/doc/reference/michelson.html}",
  year={Accessed on Jan 10, 2019}
}



@techreport{iele,
    author = "Kasampalis, Theodoros and et al.",
    year = "2018",
    number = "http://hdl.handle.net/2142/100320",
    title = "IELE: An Intermediate-Level Blockchain Language Designed and Implemented Using Formal Semantics"
}

@misc{yul,
  title={Yul},
  author={Solidity},
  howpublished = "\url{https://solidity.readthedocs.io/en/v0.5.0/yul.html}",
  year={Accessed on Jan 10, 2019}
}

@inproceedings{goldstein2024property,
  title={Property-Based Testing in Practice},
  author={Goldstein, Harrison and Cutler, Joseph W and Dickstein, Daniel and Pierce, Benjamin C and Head, Andrew},
  booktitle={Proceedings of the IEEE/ACM 46th International Conference on Software Engineering},
  pages={1--13},
  year={2024}
}

@inproceedings{sullivan2004software,
  title={Software assurance by bounded exhaustive testing},
  author={Sullivan, Kevin and Yang, Jinlin and Coppit, David and Khurshid, Sarfraz and Jackson, Daniel},
  booktitle={Proceedings of the 2004 ACM SIGSOFT international symposium on Software testing and analysis},
  pages={133--142},
  year={2004}
}

@inproceedings{BMC,
  author = "Armin Biere and Alessandro Cimatti and Edmund M. Clarke and Yunshan Zhu",
  title = "Symbolic Model Checking without {BDDs}",
  booktitle = "Tools and Algorithms for the Construction and Analysis of Systems", 
  year = "1999",
  pages = "193--207"
}

@ARTICLE{McMinn04search-basedsoftware,
author = {Phil McMinn},
title = {Search-based Software Test Data Generation: A Survey},
journal = {Software Testing, Verification and Reliability},
year = {2004},
volume = {14},
pages = {105--156}
}

@book{Popper,
  author = "Karl Popper",
  title = "The Logic of Scientific Discovery",
  year = 1959,
  publisher = "Hutchinson",
  city = "London"
  }


@inproceedings{CBMCp,
  author = "Daniel Kroening and Edmund M. Clarke and Flavio Lerda",
  title = "A Tool for Checking {ANSI-C} Programs",
  booktitle = "Tools and Algorithms for the Construction and Analysis of Systems",
  year = "2004",
  pages = "168--176"
}

@article{de1979social,
  title={Social processes and proofs of theorems and programs},
  author={De Millo, Richard A and Lipton, Richard J and Perlis, Alan J},
  journal={Communications of the ACM},
  volume={22},
  number={5},
  pages={271--280},
  year={1979},
  publisher={ACM New York, NY, USA}
}


@misc{CBMC,
  howpublished = "\url{https://www.cprover.org/cbmc/}"
}

@inproceedings{SyntaxUM,
  title = "Syntax Is All You Need: A Universal-Language Approach to Mutant Generation",
  author = "Sourav Deb and Kush Jain and Rijnard van Tonder and Claire Le Goues and Alex Groce",
  year = 2024,
  booktitle = "ACM International Conference on the Foundations of Software Engineering"
  }